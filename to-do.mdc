Voy a revisar el documento `/.cursor/rules/prd-simulador.mdc` para entender todos los requisitos del simulador y as√≠ preparar una lista completa de TO-DOs y un plan. Luego te har√© 4-6 preguntas de clarificaci√≥n y te propondr√© el plan para tu aprobaci√≥n.
Ran tool

Justo revis√© a fondo `/.cursor/rules/prd-simulador.mdc` y entend√≠ el alcance funcional y t√©cnico. Prepar√© preguntas de cierre de requerimientos y un plan con TO-DOs exhaustivos para construirlo localmente con una UI profesional y con branding de Financiera Incentiva.

### Preguntas de clarificaci√≥n (por favor responde en bloque)
1) Branding: ¬øtienes c√≥digos HEX exactos (primario verde y secundario azul), logo SVG/PNG y tipograf√≠a oficial? Si no, propongo que me compartas la gu√≠a o que yo derive la paleta de la imagen del simulador.  
2) v1.1 ahora o despu√©s: ¬øincluimos desde v1 el comparador A/B/C y la renta mensual de GPS, o lo dejamos detr√°s de un toggle oculto para asesor y lo activamos despu√©s?  
3) PDF: ¬øprefieres generaci√≥n client-side con `@react-pdf/renderer` (r√°pida para local) o server-side con headless Chromium (m√°s ‚Äúpixel-perfect‚Äù para car√°tula/tablas)?  
4) Enganche m√≠nimo: ¬øconfirmamos 30% por default y editable en panel Admin (futuro), o fijamos 30% duro en v1?  
5) Puerto local: evitar√© 3000/3001/8000/8080 como prefieres [[memory:2760016]]. ¬øTe parece bien 4321 para el dev server?  
6) Seguro financiado: en v1 el default es ‚Äúsumar al principal‚Äù. ¬øQuieres habilitar tambi√©n el sub-pr√©stamo 12m en v1 o dejarlo para v1.1?

### Plan propuesto y TO-DOs por fases
- Entregable base: Web app Next.js (TS) con UI profesional, endpoint `/api/quotes/compute`, car√°tula PDF, CSV/XLSX de la tabla y JSON de c√°lculo.

#### Fase 0 ‚Äî Bootstrap y base del proyecto
- [x] Inicializar proyecto Next.js 15 + TypeScript (App Router), puerto `4321`.
- [x] Configurar `eslint`, `prettier`, `husky` + `lint-staged`.
- [x] UI kit: `tailwindcss` + `shadcn/ui` para componentes accesibles.
- [x] Utilidades: `date-fns`, `zod` (validaci√≥n), `numeral` o `Intl.NumberFormat` MXN.
- [x] E2E: `playwright`; Unit: `vitest` o `jest`.
- [x] Estructura de carpetas:
  - `src/app/(web)/page.tsx`, `src/app/api/quotes/compute/route.ts`
  - `src/lib/math/finance.ts`, `src/lib/dates/quincena.ts`, `src/lib/format/money.ts`
  - `src/components/form/*`, `src/components/summary/*`
  - `src/pdf/*`, `src/csv/*`, `src/styles/theme.ts`

#### Fase 1 ‚Äî Motor de c√°lculo (puro y testeable)
- [x] Implementar funciones puras seg√∫n ¬ß6 y ¬ß12: `computeQuote`, `nextQuincena`, `buildSchedule`.
- [x] Soportar prorrateo por d√≠as reales con TAN/360 (A360) y opci√≥n Actual/360.
- [x] Redondeo half-up por componente y ajuste final del √∫ltimo periodo.
- [x] Modo seguro: contado vs. financiado (sumar a principal). Hook para 12m subloan preparado pero desactivado.
- [x] Pruebas unitarias con los casos del ¬ß16 y el ejemplo ¬ß8.

#### Fase 2 ‚Äî API de c√°lculo
- [x] `POST /api/quotes/compute` con `zod` para request/response conforme a ¬ß11.
- [x] Feature flags en `settings` (d√≠a base, regla quincena, modo seguro).
- [x] Manejo de errores de validaci√≥n (c√≥digos y mensajes del PRD).

#### Fase 3 ‚Äî UI del simulador (cliente/asesor)
- [x] Form con `react-hook-form`: valor del auto, enganche, plazo (12/24/36/48/60*), seguro (toggle) y monto de seguro, fecha auto=hoy.
- [x] Validaciones UX: enganche m√≠nimo con autocorrecci√≥n y aviso; bloqueo si falta monto de seguro cuando aplica.
- [x] Resumen vivo (card pegajosa): pago estimado, desembolso inicial, monto financiado, fecha 1er pago.
- [x] Estados: loading de c√°lculo, tooltips (IVA en comisiones e intereses), mensajes de error.

#### Fase 4 ‚Äî Archivos y exportables
- [x] PDF "Car√°tula + Desembolso + primeras 6 l√≠neas de tabla" con bot√≥n "ver completa".
- [x] CSV/XLSX de la tabla completa.
- [x] Bot√≥n "Copiar JSON" y "Copiar link" con par√°metros serializados.

#### Fase 5 ‚Äî Branding y dise√±o
- [x] Sistema de temas con tokens: `--color-primary`, `--color-secondary`, gradiente verde‚Üíazul del brand.
- [x] Header con logo, tipograf√≠a corporativa, botones y cards con look profesional.
- [x] Adaptaci√≥n responsive; contraste AA y foco visible.

#### Fase 6 ‚Äî Extensiones v1.1 (opcional si apruebas)
- [x] Niveles A/B/C: chips y c√°lculo por nivel seleccionado.
- [x] Toggle "Comparar 3 niveles" con 3 tarjetas comparativas.
- [x] GPS mensual + instalaci√≥n opcional integrados en schedule y car√°tula.
- [x] Ampliaciones JSON/API seg√∫n ¬ß484‚Äì¬ß601.

#### Fase 7 ‚Äî QA y pruebas
- [x] Unit tests del motor (casos ¬ß16).
- [x] E2E: flujo feliz, validaciones de UI, descarga PDF/CSV.
- [ ] Revisi√≥n de accesibilidad (axe), performance (Lighthouse).

#### Fase 8 ‚Äî Documentaci√≥n y DX
- [x] `README.md` con comandos, variables, y gu√≠a de desarrollo local.
- [x] Esquema de configuraci√≥n de branding y flags.
- [x] Notas legales en la car√°tula seg√∫n ¬ß19 y ¬ß639‚Äì¬ß644.

### UI: lineamientos r√°pidos
- **Paleta**: primario verde y secundario azul del brand con gradiente aplicado a header/CTA; grises neutrales para fondos.
- **Componentes**: chips de plazo, slider de valor del auto, inputs con m√°scaras MXN, card de resumen con n√∫mero grande y subt√≠tulos.
- **Accesibilidad**: tama√±os de toque, foco visible, textos claros.

### Entorno local (plan)
- `pnpm dev --port 4321` para respetar tu preferencia de evitar 3000/3001/8000/8080 [[memory:2760016]].
- Sin base de datos; API de c√°lculo es stateless. Persistencia de inputs en `localStorage` para DX.

¬øApruebas este plan y las decisiones por fase? Si confirmas las 6 respuestas, arranco con Fase 0 y Fase 1 inmediatamente y te voy compartiendo avance por fases.

- Cambios propuestos: plan y TO-DOs completos para implementar el simulador con Next.js, motor puro, API `/api/quotes/compute`, UI profesional con branding, PDF/CSV/JSON, y extensiones v1.1 opcionales.

### üéØ Tareas Finales para Completar el Proyecto

#### Optimizaci√≥n y Mejoras Finales
- [x] Revisar accesibilidad con Lighthouse y mejorar contraste si es necesario
- [x] Optimizar performance: lazy loading, compresi√≥n de assets
- [x] Mejorar tests E2E: ajustar selectores y timeouts
- [x] Audit de seguridad: npm audit fix
- [x] Validar que todos los exports (PDF/Excel/JSON) funcionen correctamente

#### Pulimiento UI/UX
- [x] A√±adir tooltips informativos en campos clave
- [x] Mejorar mensajes de error y validaci√≥n
- [ ] A√±adir animaciones suaves en transiciones
- [ ] Optimizar responsive design en m√≥viles

#### Deployment Ready
- [x] Configurar variables de entorno para producci√≥n
- [x] Crear Dockerfile para deployment
- [x] Configurar CI/CD b√°sico
- [x] Documentar proceso de deployment